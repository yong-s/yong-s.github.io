<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PWA on 张三的网络日志</title>
    <link>https://blog.zsan.ml/tags/pwa/</link>
    <description>Recent content in PWA on 张三的网络日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 07 Aug 2022 16:28:27 +0800</lastBuildDate><atom:link href="https://blog.zsan.ml/tags/pwa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用PWA 改造WEB 为原生App</title>
      <link>https://blog.zsan.ml/posts/pwa-retrofitting/</link>
      <pubDate>Sun, 07 Aug 2022 16:28:27 +0800</pubDate>
      
      <guid>https://blog.zsan.ml/posts/pwa-retrofitting/</guid>
      <description>PWA使WEB网站更丝滑</description>
      <content:encoded><![CDATA[<blockquote>
<p>最近闲来无事，把网站升级了，更加像原生APP</p>
<p>记录下升级过程，免得以后忘了</p>
<p>PWA是什么？可以去网上搜一下，but中文文章少一点</p>
<p>用Google 封装的 好的 workbox 来升级</p>
</blockquote>
<h2 id="注册service-worker">注册Service Worker</h2>
<p>在html页面注册 SW</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>&lt;script&gt;
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">if</span> (<span style="color:#0ff;font-weight:bold">&#39;serviceWorker&#39;</span> <span style="color:#fff;font-weight:bold">in</span> navigator) {
</span></span><span style="display:flex;"><span>        navigator.serviceWorker.getRegistrations()
</span></span><span style="display:flex;"><span>            .then(regs =&gt; {
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> reg <span style="color:#fff;font-weight:bold">of</span> regs) {
</span></span><span style="display:flex;"><span>                    <span style="color:#007f7f">// 注销掉不是当前作用域的所有的 Service Worker
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                     <span style="color:#fff;font-weight:bold">if</span> (reg.scope !== <span style="color:#0ff;font-weight:bold">&#39;http://localhost:8000/&#39;</span>) {
</span></span><span style="display:flex;"><span>                        reg.unregister()
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#007f7f">// 注销掉污染 Service Worker 之后再重新注册自己作用域的 Service Worker
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                <span style="color:#fff;font-weight:bold">window</span>.addEventListener(<span style="color:#0ff;font-weight:bold">&#39;load&#39;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>                    navigator.serviceWorker.register(<span style="color:#0ff;font-weight:bold">&#39;./sw.js&#39;</span>).then(<span style="color:#fff;font-weight:bold">function</span> (e) { console.log(<span style="color:#0ff;font-weight:bold">&#34;支持sw:&#34;</span>, e.scope) })
</span></span><span style="display:flex;"><span>                })
</span></span><span style="display:flex;"><span>            })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f00">/script&gt;</span>
</span></span></code></pre></div><h2 id="生成swjs文件">生成SW.js文件</h2>
<h3 id="google-cdn">google cdn</h3>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>importScripts(<span style="color:#0ff;font-weight:bold">&#34;  &#39;https://storage.googleapis.com/workbox-cdn/releases/6.1.1/workbox-sw.js&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">&#34;</span>);
</span></span></code></pre></div><p>国内建议不使用Google</p>
<h3 id="jsdelivr-cdn">jsdelivr cdn</h3>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>importScripts(<span style="color:#0ff;font-weight:bold">&#34;https://fastly.jsdelivr.net/npm/workbox-sw@6.5.4/build/workbox-sw.min.js&#34;</span>);
</span></span></code></pre></div><h2 id="swjs-编写">SW.js 编写</h2>
<h3 id="配置相关">配置相关</h3>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.setConfig(
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 是否开启debug
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        debug: <span style="color:#fff;font-weight:bold">false</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> cacheSuffixVersion = <span style="color:#0ff;font-weight:bold">&#39;-220806&#39;</span>; <span style="color:#007f7f">// 缓存版本号
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">const</span> maxEntries = <span style="color:#ff0;font-weight:bold">100</span>; <span style="color:#007f7f">// 最大条目数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>workbox.core.setCacheNameDetails({
</span></span><span style="display:flex;"><span>    prefix: <span style="color:#0ff;font-weight:bold">&#39;zsan&#39;</span>, <span style="color:#007f7f">// 前缀
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    suffix: cacheSuffixVersion, <span style="color:#007f7f">// 后缀
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007f7f">//检测是否安装成功
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">if</span> (workbox) {
</span></span><span style="display:flex;"><span>    console.log(<span style="color:#0ff;font-weight:bold">&#34;Yay! Workbox is loaded 🎉&#34;</span>)
</span></span><span style="display:flex;"><span>} <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>    console.log(<span style="color:#0ff;font-weight:bold">&#34;Boo! Workbox didn&#39;t load 😬&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="预缓存文件">预缓存文件</h3>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> cacheFiles = [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        url: <span style="color:#0ff;font-weight:bold">&#34;/index.html&#34;</span>,
</span></span><span style="display:flex;"><span>        revision: cacheSuffixVersion
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>workbox.precaching.precacheAndRoute(cacheFiles);
</span></span></code></pre></div><h2 id="workbox策略">workbox策略</h2>
<h3 id="cdn策略">cdn策略</h3>
<p>对于一些cdn的使用，使用CacheFirst 缓存优先策略，此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.routing.registerRoute(
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> <span style="color:#fff;font-weight:bold">RegExp</span>(<span style="color:#0ff;font-weight:bold">&#39;^https://fastly\\.jsdelivr\\.net&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> workbox.strategies.CacheFirst({
</span></span><span style="display:flex;"><span>        cacheName: <span style="color:#0ff;font-weight:bold">&#39;static-immutable&#39;</span> + cacheSuffixVersion,
</span></span><span style="display:flex;"><span>        fetchOptions: {
</span></span><span style="display:flex;"><span>            mode: <span style="color:#0ff;font-weight:bold">&#39;cors&#39;</span>,
</span></span><span style="display:flex;"><span>            credentials: <span style="color:#0ff;font-weight:bold">&#39;omit&#39;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        plugins: [
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">new</span> workbox.expiration.ExpirationPlugin({
</span></span><span style="display:flex;"><span>                maxAgeSeconds: <span style="color:#ff0;font-weight:bold">30</span> * <span style="color:#ff0;font-weight:bold">24</span> * <span style="color:#ff0;font-weight:bold">60</span> * <span style="color:#ff0;font-weight:bold">60</span>,
</span></span><span style="display:flex;"><span>                purgeOnQuotaError: <span style="color:#fff;font-weight:bold">true</span>,
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><h3 id="字体文件">字体文件</h3>
<p>对于字体文件，基本上确定好就不会改动了，这里使用StaleWhileRevalidate，此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.routing.registerRoute(
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 匹配 woff 字体
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">new</span> <span style="color:#fff;font-weight:bold">RegExp</span>(<span style="color:#0ff;font-weight:bold">&#39;.*.woff&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> workbox.strategies.StaleWhileRevalidate({
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// cache storage 名称和版本号
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        cacheName: <span style="color:#0ff;font-weight:bold">&#39;font-cache&#39;</span> + cacheSuffixVersion,
</span></span><span style="display:flex;"><span>        plugins: [
</span></span><span style="display:flex;"><span>            <span style="color:#007f7f">// 使用 expiration 插件实现缓存条目数目和时间控制
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">new</span> workbox.expiration.ExpirationPlugin({
</span></span><span style="display:flex;"><span>                <span style="color:#007f7f">// 最大保存项目
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                maxEntries,
</span></span><span style="display:flex;"><span>                <span style="color:#007f7f">// 缓存 30 天
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                maxAgeSeconds: <span style="color:#ff0;font-weight:bold">30</span> * <span style="color:#ff0;font-weight:bold">24</span> * <span style="color:#ff0;font-weight:bold">60</span> * <span style="color:#ff0;font-weight:bold">60</span>,
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>            <span style="color:#007f7f">// 使用 cacheableResponse 插件缓存状态码为 0 的请求
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">new</span> workbox.cacheableResponse.CacheableResponsePlugin({
</span></span><span style="display:flex;"><span>                statuses: [<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">200</span>],
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><h3 id="api资源">API资源</h3>
<p>API数据的请求使用NetworkFirst 策略，此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.routing.registerRoute(
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 匹配 leancloudapi.xsbb.ml
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">new</span> <span style="color:#fff;font-weight:bold">RegExp</span>(<span style="color:#0ff;font-weight:bold">&#39;^https://(?:blog\\.zsan\\.ml)&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> workbox.strategies.NetworkFirst({
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// cache storage 名称和版本号
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        cacheName: <span style="color:#0ff;font-weight:bold">&#39;blog-api-cache&#39;</span> + cacheSuffixVersion,
</span></span><span style="display:flex;"><span>        fetchOptions: {
</span></span><span style="display:flex;"><span>            mode: <span style="color:#0ff;font-weight:bold">&#39;cors&#39;</span>,
</span></span><span style="display:flex;"><span>            credentials: <span style="color:#0ff;font-weight:bold">&#39;omit&#39;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        networkTimeoutSeconds: <span style="color:#ff0;font-weight:bold">3</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><h3 id="google-analytics">Google-Analytics</h3>
<p>官方有<a href="https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics">Google Analytics 离线统计插件</a>,但是英文的，相关资料也少，折腾了好一阵子</p>
<p>1、简单点，一句代码就行,注意用这个时候，head里的代码需要是官方获取的最新的</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.googleAnalytics.initialize()
</span></span></code></pre></div><p>2、带离线统计</p>
<p>需要去Google analytics 添加自定义指标和自定义维度</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.googleAnalytics.initialize({
</span></span><span style="display:flex;"><span>    parameterOverrides: {
</span></span><span style="display:flex;"><span>        cd1: <span style="color:#0ff;font-weight:bold">&#39;offline&#39;</span>,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    hitFilter: (params) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">const</span> queueTimeInSeconds = <span style="color:#fff;font-weight:bold">Math</span>.round(params.get(<span style="color:#0ff;font-weight:bold">&#39;qt&#39;</span>) / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>        params.set(<span style="color:#0ff;font-weight:bold">&#39;cm1&#39;</span>, queueTimeInSeconds);
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><h3 id="其他后缀匹配">其他后缀匹配</h3>
<p>保证体验良好</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>workbox.routing.registerRoute(
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> <span style="color:#fff;font-weight:bold">RegExp</span>(<span style="color:#0ff;font-weight:bold">&#39;.*.(?:png|jpg|jpeg|svg|gif|webp|ico)&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> workbox.strategies.StaleWhileRevalidate()
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>workbox.routing.registerRoute(
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> <span style="color:#fff;font-weight:bold">RegExp</span>(<span style="color:#0ff;font-weight:bold">&#39;.*.(css|js)&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> workbox.strategies.StaleWhileRevalidate()
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span><span style="color:#007f7f">// 默认
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>workbox.routing.setDefaultHandler(
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> workbox.strategies.NetworkFirst({
</span></span><span style="display:flex;"><span>        networkTimeoutSeconds: <span style="color:#ff0;font-weight:bold">3</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>改造完成，尽情享用🎉</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<p><a href="https://blog.baoshuo.ren/post/workbox-service-worker/">初识 Service Worker —— 使用 Workbox 快速开发 Service Worker - 宝硕博客</a></p>
<p><a href="https://pwa.alienzhou.com/">PWA来了，你准备好了么？ - PWA学习手册</a></p>
<p><a href="https://lavas-project.github.io/pwa-book/">HOME · PWA 应用实战</a></p>
<p><a href="https://developer.chrome.com/docs/workbox/service-worker-overview/">Service worker overview - Chrome Developers</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
