<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>信息茧房 on 张三的网络日志</title>
    <link>https://blog.zsan.ml/tags/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF/</link>
    <description>Recent content in 信息茧房 on 张三的网络日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Mar 2022 13:05:35 +0800</lastBuildDate><atom:link href="https://blog.zsan.ml/tags/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>打破信息茧房</title>
      <link>https://blog.zsan.ml/posts/rss-build/</link>
      <pubDate>Sun, 13 Mar 2022 13:05:35 +0800</pubDate>
      
      <guid>https://blog.zsan.ml/posts/rss-build/</guid>
      <description>RSS服务快速搭建</description>
      <content:encoded><![CDATA[<p>何为信息茧房：</p>
<blockquote>
<p>哈佛大学凯斯·桑斯坦教授在《信息乌托邦》一书中提出，人类社会存在一种“信息茧房”现象。他认为，在信息传播中人们自身的信息需求并非全方位的，只会注意选择想要的或能使自己愉悦的信息，久而久之接触的信息就越来越局限，越来越窄，就像蚕吐出来的丝一样，细细密密地把自己包裹起来，最终像一个蚕宝宝一样被桎梏在“信息茧房”内，失去对其他不同事物的了解能力和接触机会。当时，他的这一观点还只是作为一种推论和预测，但随着网络信息和人工智能技术的飞速发展，这种“信息茧房”现象，正越来越多地发生在现实生活中和我们的身边。</p>
</blockquote>
<p>说人话就是：</p>
<blockquote>
<p>在现如今的生活中，人们接受信息的来源（主要指生活在大陆，国外也差不多），主要从微信、微博、抖音、快手等中心化的平台，各家相互关闭自己的开放接口，强迫用户留在自己平台上，有时候只关注某个大V的信息，却不得不安装一个app，就这样手机上装了很多app（这些app们平均一周更新一次，要吐了）再加上平台的推荐算法，只推荐你喜欢的（兼听则明，偏信则暗），这样下去，整个人的认知无法被提高</p>
</blockquote>
<p>经过一段时间的探索，搭建了RSS这套服务，RSS服务属于古老服务了，估计只有数字原住民才听说过，目前来说还可以，正在慢慢过渡，在此记录下搭建过程，方便下次迁移</p>
<blockquote>
<p><strong>RSS</strong>（英文全称：<a href="https://zh.wikipedia.org/wiki/Resource_Description_Framework" title="Resource Description Framework">RDF</a> Site Summary 或 Really Simple Syndication<a href="https://zh.wikipedia.org/wiki/RSS#cite_note-powers-2003-1-2">[2]</a>），中文译作<strong>简易信息聚合</strong><a href="https://zh.wikipedia.org/wiki/RSS#cite_note-3">[3]</a>，也称<strong>聚合内容</strong><a href="https://zh.wikipedia.org/wiki/RSS#cite_note-%E5%BC%A0%E9%94%902015-4">[4]</a>，是一种<a href="https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E4%BE%86%E6%BA%90" title="消息来源">消息来源</a>格式规范，用以聚合多个网站更新的内容并自动通知网站订阅者。使用 RSS 后，网站订阅者便无需再手动查看网站是否有新的内容，同时 RSS 可将多个网站更新的内容进行整合，以摘要的形式呈现，有助于订阅者快速获取重要信息，并选择性地点阅查看。</p>
<p>                                                                                                             ——引用wikipedia</p>
</blockquote>
<p>准备：</p>
<ul>
<li>需要一台服务器，运行linux即可       </li>
</ul>
<blockquote>
<p>配置不用太大，我用的是阿里云的服务器，生活在大陆，国内访问比较快</p>
</blockquote>
<p>用到的服务：</p>
<blockquote>
<p><a href="https://docs.rsshub.app/">RSSHub</a>：一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。</p>
<p><a href="http://ttrss.henry.wang/">TTRSS</a>：一款基于 PHP 的免费开源 RSS 聚合阅读器。</p>
</blockquote>
<p>用rsshub生成官方没有的订阅源，ttrss来管理订阅源的阅读记录，支持各端同步</p>
<h3 id="一部署rsshub">一、部署RSSHub</h3>
<p>支持docker部署，不过，我是部署到 Vercel 上的，好处是免费、国外的机子，真正连接到互联网的，国内可访问。</p>
<p>1、注册 <a href="https://vercel.com/import/project?template=https://github.com/DIYgod/RSSHub"> Vercel</a></p>
<blockquote>
<p>有帐户的直接可以登录部署</p>
<p>没有的先注册，建议用GitHub账号登录注册，github账号邮箱建议用gmail等国外的，通过率高，如果提示失败，可以和官方人员发email解封，我的当时就直接被冻结了，发了email后，一会就解封了，态度超好👍</p>
</blockquote>
<p>2、成功后可以直接点去部署了，我是没有用官方的库部署，fork官方库后去授权部署的，效果一样，vercel 用默认的就行，等待一会，撒花，表示部署成功</p>
<p>3、直接访问域名成功打开即部署成功</p>
<p>4、rsshub配置环境可参考 <a href="https://docs.rsshub.app/install/#pei-zhi">部署 | RSSHub</a> 配置</p>
<ul>
<li>
<p>用户认证</p>
</li>
<li>
<p>日志配置</p>
</li>
<li>
<p>其他一些服务需要的api-key</p>
</li>
</ul>
<p>5、在vercel 配置完 重新部署服务，才生效</p>
<h5 id="更新">更新</h5>
<p>支持vercel自动拉取代码更新</p>
<h3 id="二部署ttrss">二、部署TTRSS</h3>
<p>部署到vps 阿里云上，支持docker、docker-composr即可</p>
<h4 id="docker-compose部署">docker-compose部署</h4>
<ol>
<li>下载 <a href="https://github.com/HenryQW/Awesome-TTRSS/blob/main/docker-compose.yml">docker-compose.yml</a>至任意目录。</li>
<li>更改 <code>docker-compose.yml</code> 中的设置，请务必更改 postgres 用户密码。</li>
<li>通过终端在同目录下运行 <code>docker-compose up -d</code> 后等待部署完成。</li>
<li>默认通过 181 端口访问 TTRSS，默认账户：<code>admin</code> 密码：<code>password</code>，请第一时间更改。</li>
<li><code>wangqiru/mercury-parser-api</code> 及 <code>wangqiru/opencc-api-server</code> 为支持高级功能而加入的可选服务类容器，删除不会影响 TTRSS 基础功能。</li>
</ol>
<p>SELF_URL_PATH: TTRSS 实例地址。<strong>🔴 请注意，该变量值必须与你在浏览器中用于访问 TTRSS 的 URL 保持完全一致，否则 TTRSS 将无法启动。</strong></p>
<p>这里说明一下，如果没有域名就要配置为 ip:端口号 的形式</p>
<p>更多配置参考 <a href="http://ttrss.henry.wang/zh/#%E9%83%A8%E7%BD%B2">官方文档</a></p>
<h4 id="更新-1">更新</h4>
<p>推荐使用手动更新</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span> <span style="color:#007f7f">#自用</span>
</span></span><span style="display:flex;"><span> docker-compose pull
</span></span><span style="display:flex;"><span> <span style="color:#007f7f">#官方推荐</span>
</span></span><span style="display:flex;"><span> docker pull wangqiru/ttrss:latest
</span></span><span style="display:flex;"><span> <span style="color:#007f7f"># docker pull wangqiru/mercury-parser-api:latest</span>
</span></span><span style="display:flex;"><span> <span style="color:#007f7f"># docker pull wangqiru/opencc-api-server:latest</span>
</span></span><span style="display:flex;"><span> docker-compose up -d <span style="color:#007f7f"># 如果您没有使用 docker-compose，我确信您知道该怎么做。</span>
</span></span></code></pre></div><h4 id="备份">备份</h4>
<p>养成定期备份的习惯，有些订阅源很重要的资料可以永久保存，避免404</p>
<ul>
<li>
<p>复制 Postgres 数据卷 <code>~/postgres/data/</code>（或者你在 docker-compose 中指定的目录）至其他任何地方作为备份，这非常重要！</p>
</li>
<li>
<p>执行如下命令来导出所有数据：</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#007f7f">#docker exec postgres pg_dumpall -c -U 数据库用户名 &gt; export.sql</span>
</span></span><span style="display:flex;"><span>docker <span style="color:#fff;font-weight:bold">exec</span> postgres pg_dumpall -c -U postgres &gt; export.sql
</span></span></code></pre></div><ul>
<li>执行如下命令来导入所有数据：</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#007f7f">#cat export.sql | docker exec -i postgres psql -U 数据库用户名</span>
</span></span><span style="display:flex;"><span>cat export.sql | docker <span style="color:#fff;font-weight:bold">exec</span> -i postgres psql -U postgres
</span></span></code></pre></div><h3 id="三客户端推荐">三、客户端推荐</h3>
<p>服务端都配置好了，接下来就是如何阅读了</p>
<p>iOS/macOS：<a href="https://reederapp.com/">Reeder 5</a> 内置的 <a href="http://ttrss.henry.wang/zh/#fever-api">Fever API 模拟插件</a> 可以使用</p>
<p>android：FeedMe</p>
<p>Web：直接网页登录查看即可</p>
<h3 id="四订阅源订阅小技巧">四、订阅源订阅小技巧</h3>
<p>服务都搭建好了，下面就该订阅订阅源了，分享一些小技巧</p>
<ul>
<li>
<p>微博的可以使用 <a href="https://rssfeed.today/weibo/">Weibo to RSS</a> 订阅</p>
</li>
<li>
<p>微信的封锁严重，rsshub订阅有限，可以用 <a href="https://wechat2rss.xlab.app/posts/list/">公众号列表 | 微信公众号转RSS服务</a> 来订阅，如果没有想订阅的，可以提 <a href="https://github.com/ttttmr/wechat2rss/issues/7">提交新公众号前看这里 · Issue #7 · ttttmr/wechat2rss · GitHub</a></p>
</li>
<li>
<p>blogspot的rsshub没有提供，可以用cf反代后订阅</p>
</li>
<li>
<p>twitter 的开发者api太难申请了，可以用 <a href="https://nitter.net/">nitter</a> 输出的rss 访问困难再结合cf反代，完美</p>
</li>
</ul>
<p>以上，一个低成本，服务稳定，数据可控RSS生态部署成功，尽情享用吧！🎉</p>
<hr>
<p>参考文档：</p>
<blockquote>
<p><a href="https://docs.rsshub.app">RSSHub</a></p>
<p><a href="http://ttrss.henry.wang/zh/">🐋 Awesome TTRSS | 🐋 Awesome TTRSS</a></p>
<p><a href="https://diygod.me/ohmyrss/">我有特别的 RSS 使用技巧</a></p>
<p><a href="https://www.alpaca.plus/archives/my-rss-solution.html">我的RSS解决方案 - alpaca++</a></p>
<p><a href="http://www.mod.gov.cn/jmsd/2021-03/15/content_4880922.htm">警惕陷入“信息茧房” - 中华人民共和国国防部</a></p>
<p><a href="https://wiki.mbalib.com/wiki/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF">信息茧房 - MBA智库百科</a></p>
<p><a href="https://zh.wikipedia.org/wiki/RSS">RSS 维基百科</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
