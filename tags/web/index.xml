<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>web on 张三的网络日志</title>
    <link>https://blog.zsan.ml/tags/web/</link>
    <description>Recent content in web on 张三的网络日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 07 Aug 2022 16:28:27 +0800</lastBuildDate><atom:link href="https://blog.zsan.ml/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用PWA 改造WEB 为原生App</title>
      <link>https://blog.zsan.ml/posts/pwa-retrofitting/</link>
      <pubDate>Sun, 07 Aug 2022 16:28:27 +0800</pubDate>
      
      <guid>https://blog.zsan.ml/posts/pwa-retrofitting/</guid>
      <description>PWA使WEB网站更丝滑</description>
      <content:encoded><![CDATA[<blockquote>
<p>最近闲来无事，把网站升级了，更加像原生APP</p>
<p>记录下升级过程，免得以后忘了</p>
<p>PWA是什么？可以去网上搜一下，but中文文章少一点</p>
<p>用Google 封装的 好的 workbox 来升级</p>
</blockquote>
<h2 id="注册service-worker">注册Service Worker</h2>
<p>在html页面注册 SW</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#e6db74">&#39;serviceWorker&#39;</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">navigator</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">serviceWorker</span>.<span style="color:#a6e22e">getRegistrations</span>()
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">regs</span> =&gt; {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">reg</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">regs</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// 注销掉不是当前作用域的所有的 Service Worker
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                     <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reg</span>.<span style="color:#a6e22e">scope</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;http://localhost:8000/&#39;</span>) {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">reg</span>.<span style="color:#a6e22e">unregister</span>()
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 注销掉污染 Service Worker 之后再重新注册自己作用域的 Service Worker
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;load&#39;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">serviceWorker</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;./sw.js&#39;</span>).<span style="color:#a6e22e">then</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">e</span>) { <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;支持sw:&#34;</span>, <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">scope</span>) })
</span></span><span style="display:flex;"><span>                })
</span></span><span style="display:flex;"><span>            })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span></code></pre></div><h2 id="生成swjs文件">生成SW.js文件</h2>
<h3 id="google-cdn">google cdn</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">importScripts</span>(<span style="color:#e6db74">&#34;  &#39;https://storage.googleapis.com/workbox-cdn/releases/6.1.1/workbox-sw.js&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;</span>);
</span></span></code></pre></div><p>国内建议不使用Google</p>
<h3 id="jsdelivr-cdn">jsdelivr cdn</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">importScripts</span>(<span style="color:#e6db74">&#34;https://fastly.jsdelivr.net/npm/workbox-sw@6.5.4/build/workbox-sw.min.js&#34;</span>);
</span></span></code></pre></div><h2 id="swjs-编写">SW.js 编写</h2>
<h3 id="配置相关">配置相关</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">setConfig</span>(
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 是否开启debug
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">debug</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">cacheSuffixVersion</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;-220806&#39;</span>; <span style="color:#75715e">// 缓存版本号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">maxEntries</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>; <span style="color:#75715e">// 最大条目数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">core</span>.<span style="color:#a6e22e">setCacheNameDetails</span>({
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">prefix</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;zsan&#39;</span>, <span style="color:#75715e">// 前缀
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">suffix</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">cacheSuffixVersion</span>, <span style="color:#75715e">// 后缀
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//检测是否安装成功
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">workbox</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Yay! Workbox is loaded 🎉&#34;</span>)
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Boo! Workbox didn&#39;t load 😬&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="预缓存文件">预缓存文件</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">cacheFiles</span> <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;/index.html&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">revision</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">cacheSuffixVersion</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">precaching</span>.<span style="color:#a6e22e">precacheAndRoute</span>(<span style="color:#a6e22e">cacheFiles</span>);
</span></span></code></pre></div><h2 id="workbox策略">workbox策略</h2>
<h3 id="cdn策略">cdn策略</h3>
<p>对于一些cdn的使用，使用CacheFirst 缓存优先策略，此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">routing</span>.<span style="color:#a6e22e">registerRoute</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#39;^https://fastly\\.jsdelivr\\.net&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">strategies</span>.<span style="color:#a6e22e">CacheFirst</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">cacheName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;static-immutable&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">cacheSuffixVersion</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetchOptions</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;cors&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">credentials</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;omit&#39;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">plugins</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">expiration</span>.<span style="color:#a6e22e">ExpirationPlugin</span>({
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">maxAgeSeconds</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">purgeOnQuotaError</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><h3 id="字体文件">字体文件</h3>
<p>对于字体文件，基本上确定好就不会改动了，这里使用StaleWhileRevalidate，此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">routing</span>.<span style="color:#a6e22e">registerRoute</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 匹配 woff 字体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#39;.*.woff&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">strategies</span>.<span style="color:#a6e22e">StaleWhileRevalidate</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// cache storage 名称和版本号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">cacheName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;font-cache&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">cacheSuffixVersion</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">plugins</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 使用 expiration 插件实现缓存条目数目和时间控制
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">expiration</span>.<span style="color:#a6e22e">ExpirationPlugin</span>({
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 最大保存项目
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#a6e22e">maxEntries</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 缓存 30 天
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#a6e22e">maxAgeSeconds</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span>,
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 使用 cacheableResponse 插件缓存状态码为 0 的请求
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">cacheableResponse</span>.<span style="color:#a6e22e">CacheableResponsePlugin</span>({
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">statuses</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">200</span>],
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><h3 id="api资源">API资源</h3>
<p>API数据的请求使用NetworkFirst 策略，此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">routing</span>.<span style="color:#a6e22e">registerRoute</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 匹配 leancloudapi.xsbb.ml
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#39;^https://(?:blog\\.zsan\\.ml)&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">strategies</span>.<span style="color:#a6e22e">NetworkFirst</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// cache storage 名称和版本号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">cacheName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;blog-api-cache&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">cacheSuffixVersion</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetchOptions</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;cors&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">credentials</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;omit&#39;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">networkTimeoutSeconds</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><h3 id="google-analytics">Google-Analytics</h3>
<p>官方有<a href="https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics">Google Analytics 离线统计插件</a>,但是英文的，相关资料也少，折腾了好一阵子</p>
<p>1、简单点，一句代码就行,注意用这个时候，head里的代码需要是官方获取的最新的</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">googleAnalytics</span>.<span style="color:#a6e22e">initialize</span>()
</span></span></code></pre></div><p>2、带离线统计</p>
<p>需要去Google analytics 添加自定义指标和自定义维度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">googleAnalytics</span>.<span style="color:#a6e22e">initialize</span>({
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">parameterOverrides</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">cd1</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;offline&#39;</span>,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">hitFilter</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">params</span>) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">queueTimeInSeconds</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">round</span>(<span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;qt&#39;</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;cm1&#39;</span>, <span style="color:#a6e22e">queueTimeInSeconds</span>);
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><h3 id="其他后缀匹配">其他后缀匹配</h3>
<p>保证体验良好</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">routing</span>.<span style="color:#a6e22e">registerRoute</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#39;.*.(?:png|jpg|jpeg|svg|gif|webp|ico)&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">strategies</span>.<span style="color:#a6e22e">StaleWhileRevalidate</span>()
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">routing</span>.<span style="color:#a6e22e">registerRoute</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#39;.*.(css|js)&#39;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">strategies</span>.<span style="color:#a6e22e">StaleWhileRevalidate</span>()
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 默认
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">routing</span>.<span style="color:#a6e22e">setDefaultHandler</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">workbox</span>.<span style="color:#a6e22e">strategies</span>.<span style="color:#a6e22e">NetworkFirst</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">networkTimeoutSeconds</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>改造完成，尽情享用🎉</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<p><a href="https://blog.baoshuo.ren/post/workbox-service-worker/">初识 Service Worker —— 使用 Workbox 快速开发 Service Worker - 宝硕博客</a></p>
<p><a href="https://pwa.alienzhou.com/">PWA来了，你准备好了么？ - PWA学习手册</a></p>
<p><a href="https://lavas-project.github.io/pwa-book/">HOME · PWA 应用实战</a></p>
<p><a href="https://developer.chrome.com/docs/workbox/service-worker-overview/">Service worker overview - Chrome Developers</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Docker 部署 Nginx服务</title>
      <link>https://blog.zsan.ml/posts/docker-build-nginx/</link>
      <pubDate>Fri, 08 Apr 2022 16:23:01 +0800</pubDate>
      
      <guid>https://blog.zsan.ml/posts/docker-build-nginx/</guid>
      <description>用docker部署nginx官方只给了docker版本的，没有compose的，只好</description>
      <content:encoded><![CDATA[<blockquote>
<p>用docker部署nginx官方只给了docker版本的，没有compose的，只好自己转换一下了，记录一下，方便下次部署，这只是简单的部署，至于nginx配置的话，有空再补吧🫠</p>
</blockquote>
<h2 id="1创建docker-nginx目录">1、创建docker-nginx目录</h2>
<p>新建 docker-compose.yml 文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir docker-nginx
</span></span><span style="display:flex;"><span>mkdir nginx
</span></span><span style="display:flex;"><span>mkdir log
</span></span><span style="display:flex;"><span>mkdir html
</span></span><span style="display:flex;"><span>vim docker-compose.yml
</span></span></code></pre></div><h2 id="2docker-composeyml">2、docker-compose.yml</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3.3&#39;</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span> <span style="color:#f92672">web</span>:
</span></span><span style="display:flex;"><span> <span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx:latest</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>     - <span style="color:#ae81ff">./nginx:/etc/nginx</span>
</span></span><span style="display:flex;"><span>     - <span style="color:#ae81ff">./log:/var/log/nginx</span>
</span></span><span style="display:flex;"><span>     - <span style="color:#ae81ff">./html:/usr/share/nginx/html  //网站放置目录</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>     - <span style="color:#e6db74">&#34;8081:80&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>     - <span style="color:#ae81ff">NGINX_HOST=&#34;192.168.116.10&#34; //访问地址/域名</span>
</span></span><span style="display:flex;"><span>     - <span style="color:#ae81ff">NGINX_PORT=&#34;80&#34; //访问端口</span>
</span></span><span style="display:flex;"><span>     - <span style="color:#ae81ff">TZ=&#34;Asia/Shanghai&#34; //时区</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span></code></pre></div><h2 id="3手动cp配置文件">3、手动cp配置文件</h2>
<p>由于官方image没有默认映射外部文件，需要手动把配置文件cp出来</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 运行官方命令创建默认容器</span>
</span></span><span style="display:flex;"><span>docker run --name nginx -p 8080:80 -d nginx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#配置文件复制到nginx里,其他文件可用复制</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#是个坑，路径必须是全路径</span>
</span></span><span style="display:flex;"><span>docker cp nginx:/etc/nginx /opt/docker-nginx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#删除默认容器</span>
</span></span><span style="display:flex;"><span>docker stop nginx <span style="color:#f92672">&amp;&amp;</span> docker rm nginx
</span></span></code></pre></div><h2 id="4修改nginx配置文件">4、修改nginx配置文件</h2>
<p>端口号、域名，ssl等和以前配置一样，不再赘述</p>
<h2 id="5运行测试">5、运行&amp;测试</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker-compose up -d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#查看日志</span>
</span></span><span style="display:flex;"><span>docker-compose logs -f     
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#浏览器输入IP或域名查看是否可以访问</span>
</span></span></code></pre></div><hr>
<p>参考文档：</p>
<blockquote>
<p>1、<a href="https://hub.docker.com/_/nginx">Docker Hub-nginx</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
