<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>脚本 on 张三的网络日志</title>
    <link>https://blog.zsan.cf/tags/%E8%84%9A%E6%9C%AC/</link>
    <description>Recent content in 脚本 on 张三的网络日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 Jun 2022 15:08:44 +0800</lastBuildDate><atom:link href="https://blog.zsan.cf/tags/%E8%84%9A%E6%9C%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Autojs 笔记</title>
      <link>https://blog.zsan.cf/posts/autojs-notes/</link>
      <pubDate>Sun, 26 Jun 2022 15:08:44 +0800</pubDate>
      
      <guid>https://blog.zsan.cf/posts/autojs-notes/</guid>
      <description>用autojs在Android上写些小脚本吧！</description>
      <content:encoded><![CDATA[<blockquote>
<p>最近薅🦙接触了autojs，在Android手机上可自动化运行的脚本，不用root，可直接运行，轻量小巧，底层调用Android API，自己可封装API👍</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>autojs原作者已不再维护，推出了autojs.pro版，有钱的大佬可以直接去安装下载，官方文档也很全</p>
<p>没钱的话，可以用autoxjs，从原有开源库接手过来的，开源免费</p>
<p><a href="https://github.com/kkevsekk1/AutoX">GitHub - kkevsekk1/AutoX: A UiAutomator on android, does not need root access(安卓平台上的JavaScript自动化工具)</a></p>
<h2 id="常用语法">常用语法</h2>
<h3 id="获取设备信息">获取设备信息</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// 打印运行环境信息
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;屏幕宽度:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">width</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n屏幕高度:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">height</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nbuildId:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">buildId</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n主板:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">board</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n制造商:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">brand</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n型号:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">model</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n产品名称:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">product</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nbootloader版本:&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nbootloader版本:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">bootloader</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n硬件名称:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">hardware</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n唯一标识码:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">fingerprint</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nIMEI: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">getIMEI</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nAndroidId: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">getAndroidId</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nMac: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">getMacAddress</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\nAPI: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">device</span>.<span style="color:#a6e22e">sdkInt</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">str</span>);
</span></span></code></pre></div><h3 id="打开应用市场app详情页">打开应用市场app详情页</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">//打开应用市场app详情页
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">startAppStore</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">toastLog</span>(<span style="color:#e6db74">&#34;去应用市场...&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">intent</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">action</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;VIEW&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// type: &#34;image/png&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">parseUri</span>(<span style="color:#e6db74">&#39;market://details?id=&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">pkgName</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">flags</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;activity_new_task&#34;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">packageName</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">myDevice</span>(<span style="color:#e6db74">&#34;Markets&#34;</span>),
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">startActivity</span>(<span style="color:#a6e22e">i</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="检测app安装状态">检测app安装状态</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// 通过判断包名判断是否安装app
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">getAppName</span>(<span style="color:#a6e22e">pkgName</span>)
</span></span></code></pre></div><h3 id="获取当前时间">获取当前时间</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getCurData</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">now</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">timeNow</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">now</span>.<span style="color:#a6e22e">getFullYear</span>(); <span style="color:#75715e">//得到年份
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">m</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">now</span>.<span style="color:#a6e22e">getMonth</span>() <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;<span style="color:#75715e">//得到月份
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">now</span>.<span style="color:#a6e22e">getDate</span>();<span style="color:#75715e">//得到日期
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// let day = now.getDay();//得到周几
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">now</span>.<span style="color:#a6e22e">getHours</span>();<span style="color:#75715e">//得到小时数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">now</span>.<span style="color:#a6e22e">getMinutes</span>();<span style="color:#75715e">//得到分钟数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">now</span>.<span style="color:#a6e22e">getSeconds</span>();<span style="color:#75715e">//得到秒数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">timeNow</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">m</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">h</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;:&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// log(timeNow);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">timeNow</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="调试">调试</h2>
<p>在vscode内安装<a href="https://marketplace.visualstudio.com/items?itemName=aaroncheng.auto-js-vsce-fixed">调试插件</a></p>
<blockquote>
<p>1、按 <code>Ctrl+Shift+P</code> 或点击&quot;查看&quot;-&gt;&ldquo;命令面板&quot;可调出命令面板，输入 <code>Autox.js</code> 可以看到几个命令，移动光标到命令<code>Auto.js Autox,js: Start All Server</code>，按回车键执行该命令。</p>
<p>2、通过无线或有线连接</p>
<p>3、之后就可以在电脑上编辑JavaScript文件并通过命令<code>Run</code>或者按键<code>F5</code>在手机上运行了。</p>
</blockquote>
<h2 id="打包">打包</h2>
<p>调试完成后，按 <code>Ctrl+Shift+P</code> 或点击&quot;查看&rdquo;-&gt;&ldquo;命令面板&quot;可调出命令面板，输入 <code>Autox.js</code> 可以看到几个命令，移动光标到命令<code>Auto.js Autox,js: Save On Device</code>，按回车键执行该命令。</p>
<p>保存到手机上后，选择更多—打包应用</p>
<p>等待打包成功后，尽情享用吧！🎉</p>
<p>ps：目前最新版都是X64架构的，如需X32架构需要装老版本即可</p>
<hr>
<blockquote>
<p>ps：如果想想写个简单的小脚本，还是用autojs不错，简单轻便，用appium那一套架构太重了，杀鸡焉用牛刀啊！</p>
<p>提高认知，降维打击！</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>云服务器docker搭建自动领京豆bot互动指令</title>
      <link>https://blog.zsan.cf/posts/docker-build-jdbot/</link>
      <pubDate>Fri, 30 Apr 2021 22:49:08 +0000</pubDate>
      
      <guid>https://blog.zsan.cf/posts/docker-build-jdbot/</guid>
      <description>使用docker部署自动领金豆bot脚本
使用的版本：
服务器：centos 8
docker： 20.10.6
docker-compose： 1.27.4
1、服务器安装docker，docker-compose 推荐使用centos服务器安装docker、docker-compose
Docker安装
国内一键安装 curl -sSL https://get.daocloud.io/docker | sh 国外一键安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun docker-compose安装
$ sudo curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose
要安装其他版本的 Compose，请替换 1.24.1。
最新发行的版本地址：https://github.com/docker/compose/releases。
将可执行权限应用于二进制文件：
$ sudo chmod +x /usr/local/bin/docker-compose
创建软链：
$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
通过docker-compose version查看docker-compose版本，确认是否安装成功。
2、安装jd_scripts 创建一个目录jd_scripts用于存放备份配置等数据，迁移重装的时候只需要备份整个jd_scripts目录即可
需要新建的目录文件结构参考如下:
jd_scripts ├── logs │ ├── XXXX.log │ └── XXXX.log ├── my_crontab_list.sh └── docker-compose.yml jd_scripts/logs建一个空文件夹就行 jd_scripts/docker-compose.yml 参考内容如下(自己动手能力不行搞不定请使用默认配置)： 根据文档一步一步下去就ok了，下面主要记录下可能用到的命令
目录文件配置好之后在 jd_scripts目录执行。
docker-compose up -d 启动（修改docker-compose.yml后需要使用此命令使更改生效）；
docker-compose logs 打印日志；
docker-compose logs -f 打印日志，-f表示跟随日志； docker logs -f jd_scripts 和上面两条相比可以显示汉字； docker-compose pull 更新镜像；
docker-compose stop 停止容器；
docker-compose restart 重启容器；
docker-compose down 停止并删除容器；
3、开代理机器，激活tg-bot 这里是个大坑，拿个小本本记下来，其实就是docker内代理宿主机代理的问题
由于众所周知的原因，国内的机器不能访问tg，而又想使用tg-bot来控制，无奈，国外机子太贵（穷），最低也要5美刀！遂买国内机子开代理使用
1、买国内机器，推荐大厂的 这里应该放各大厂的aff的，留个坑
2、安装clash 一直在使用clash，直接网上搜索clash下载，找到对应版本下载，博主用的是centos，下载linux-amd64的
1、下载clash，最新版本可去官网找
wget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-amd64-v0.19.0.gz 2、解压
gzip -d clash-linux-amd64-v0.19.0.gz 3、移动至usr/bin/clash并重命名为clash
sudo mv clash-linux-amd64-v0.19.0 /usr/bin/clash 4、赋予clash运行权限
sudo chmod +x /usr/bin/clash 5、检查是否安装成功
clash -v 3、创建配置文件、安装控制面板 1.创建配置文件目录
mkdir -p /etc/clash/ 2.进入目录
cd /etc/clash/ 3.创建配置文件
vim config.yaml 4.手动编辑很麻烦，可用winscp上传
配置参数自行查找
5.下载前端代码
wget https://github.com/Dreamacro/clash-dashboard/tree/gh-pages 6.解压</description>
      <content:encoded><![CDATA[<p>使用docker部署自动领金豆bot脚本</p>
<!-- more -->
<p>使用的版本：</p>
<p>服务器：centos 8</p>
<p>docker： 20.10.6</p>
<p>docker-compose： 1.27.4</p>
<h3 id="1服务器安装dockerdocker-compose">1、服务器安装docker，docker-compose</h3>
<p>推荐使用centos服务器安装docker、docker-compose</p>
<p>Docker安装</p>
<ul>
<li>国内一键安装 <code>curl -sSL https://get.daocloud.io/docker | sh</code></li>
<li>国外一键安装 <code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></li>
</ul>
<p>docker-compose安装</p>
<p><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></p>
<p>要安装其他版本的 Compose，请替换 1.24.1。</p>
<p>最新发行的版本地址：https://github.com/docker/compose/releases。</p>
<p>将可执行权限应用于二进制文件：</p>
<p><code>$ sudo chmod +x /usr/local/bin/docker-compose</code></p>
<p>创建软链：</p>
<p><code>$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></p>
<p>通过<code>docker-compose version</code>查看<code>docker-compose</code>版本，确认是否安装成功。</p>
<h3 id="2安装jd_scripts">2、安装jd_scripts</h3>
<p>创建一个目录<code>jd_scripts</code>用于存放备份配置等数据，迁移重装的时候只需要备份整个jd_scripts目录即可</p>
<p>需要新建的目录文件结构参考如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>jd_scripts
</span></span><span style="display:flex;"><span>├── logs
</span></span><span style="display:flex;"><span>│   ├── XXXX.log
</span></span><span style="display:flex;"><span>│   └── XXXX.log
</span></span><span style="display:flex;"><span>├── my_crontab_list.sh
</span></span><span style="display:flex;"><span>└── docker-compose.yml
</span></span></code></pre></div><ul>
<li><code>jd_scripts/logs</code>建一个空文件夹就行</li>
<li><code>jd_scripts/docker-compose.yml</code> 参考内容如下(自己动手能力不行搞不定请使用默认配置)：</li>
</ul>
<p>根据文档一步一步下去就ok了，下面主要记录下可能用到的命令</p>
<p>目录文件配置好之后在 <code>jd_scripts</code>目录执行。<br>
<code>docker-compose up -d</code> 启动（修改docker-compose.yml后需要使用此命令使更改生效）；<br>
<code>docker-compose logs</code> 打印日志；<br>
<code>docker-compose logs -f</code> 打印日志，-f表示跟随日志；
<code>docker logs -f jd_scripts</code> 和上面两条相比可以显示汉字；
<code>docker-compose pull</code> 更新镜像；<br>
<code>docker-compose stop</code> 停止容器；<br>
<code>docker-compose restart</code> 重启容器；<br>
<code>docker-compose down</code> 停止并删除容器；</p>
<h3 id="3开代理机器激活tg-bot">3、开代理机器，激活tg-bot</h3>
<p>这里是个大坑，拿个小本本记下来，其实就是docker内代理宿主机代理的问题</p>
<p>由于众所周知的原因，国内的机器不能访问tg，而又想使用tg-bot来控制，无奈，国外机子太贵（穷），最低也要5美刀！遂买国内机子开代理使用</p>
<h5 id="1买国内机器推荐大厂的">1、买国内机器，推荐大厂的</h5>
<p>这里应该放各大厂的aff的，留个坑</p>
<h5 id="2安装clash">2、安装clash</h5>
<p>一直在使用clash，直接网上搜索clash<a href="https://github.com/Dreamacro/clash/releases">下载</a>，找到对应版本下载，博主用的是centos，下载linux-amd64的</p>
<p>1、下载clash，最新版本可去官网找</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-amd64-v0.19.0.gz
</span></span></code></pre></div><p>2、解压</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gzip -d clash-linux-amd64-v0.19.0.gz
</span></span></code></pre></div><p>3、移动至usr/bin/clash并重命名为clash</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo mv clash-linux-amd64-v0.19.0 /usr/bin/clash
</span></span></code></pre></div><p>4、赋予clash运行权限</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo chmod +x /usr/bin/clash
</span></span></code></pre></div><p>5、检查是否安装成功</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>clash -v 
</span></span></code></pre></div><h5 id="3创建配置文件安装控制面板">3、创建配置文件、安装控制面板</h5>
<p>1.创建配置文件目录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir -p /etc/clash/
</span></span></code></pre></div><p>2.进入目录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd /etc/clash/
</span></span></code></pre></div><p>3.创建配置文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vim config.yaml
</span></span></code></pre></div><p>4.手动编辑很麻烦，可用winscp上传</p>
<p>配置参数自行查找</p>
<p>5.下载前端代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wget https://github.com/Dreamacro/clash-dashboard/tree/gh-pages
</span></span></code></pre></div><p>6.解压</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>unzip gh-pages.zip
</span></span></code></pre></div><p>7.修改目录名,这里的目录名是上面配置文件里的 external-ui: dashboard</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mv clash-dashboard-gh-pages dashboard
</span></span></code></pre></div><p><a href="http://clash.razord.top/">可用这个面板远程控制</a></p>
<h5 id="4设置clash开机启动">4、设置clash开机启动</h5>
<p>1.创建service文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo vim /usr/lib/systemd/system/clash.service
</span></span></code></pre></div><p>2.输入下面代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Description<span style="color:#f92672">=</span>clash proxy
</span></span><span style="display:flex;"><span>After<span style="color:#f92672">=</span>network.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Service<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Type<span style="color:#f92672">=</span>simple
</span></span><span style="display:flex;"><span>ExecStart<span style="color:#f92672">=</span>/usr/bin/clash -d /etc/clash
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Install<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WantedBy<span style="color:#f92672">=</span>multi-user.target
</span></span></code></pre></div><p>3.重新加载 systemd 模块</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl daemon-reload
</span></span></code></pre></div><p>4.启动Clash</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl start clash.service
</span></span></code></pre></div><p>5.设置Clash开机自启动</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl enable clash.service
</span></span></code></pre></div><p>6.判断是否成功开启代理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>curl -I https://www.google.com
</span></span></code></pre></div><p>返回200即表示代理已经成功</p>
<h5 id="5自动更新订阅配置文件">5、自动更新订阅配置文件</h5>
<blockquote>
<p>通过shell脚本自动更新Clash在线配置</p>
</blockquote>
<p>通过systemctl来管理Clash的进程，对应<code>clash.service</code>文件，通过两个脚本<code>start-clash.sh</code>和<code>stop-clash.sh</code>来管理Clash的启停：</p>
<p>把上面的配置文件修改下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vim /usr/lib/systemd/system/clash.service
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Description<span style="color:#f92672">=</span>clash proxy
</span></span><span style="display:flex;"><span>After<span style="color:#f92672">=</span>network.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Service<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WorkingDirectory<span style="color:#f92672">=</span>/当前用户目录/.config/clash
</span></span><span style="display:flex;"><span>Type<span style="color:#f92672">=</span>simple
</span></span><span style="display:flex;"><span>ExecStart<span style="color:#f92672">=</span>/当前用户目录/.config/clash/start-clash.sh
</span></span><span style="display:flex;"><span>ExecStop<span style="color:#f92672">=</span>/当前用户目录/.config/clash/stop-clash.sh
</span></span><span style="display:flex;"><span>Environment<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;HOME=/当前用户目录&#34;</span>
</span></span><span style="display:flex;"><span>Environment<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;CLASH_URL=你的订阅链接&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Install<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WantedBy<span style="color:#f92672">=</span>multi-user.target
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vim /当前用户目录/.config/clash/start-clash.sh
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># save this file to ${HOME}/.config/clash/start-clash.sh</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># save pid file</span>
</span></span><span style="display:flex;"><span>echo $$ &gt; <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.config/clash/clash.pid
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>diff <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.config/clash/config.yaml &lt;<span style="color:#f92672">(</span>curl -s <span style="color:#e6db74">${</span>CLASH_URL<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$?<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    /usr/bin/clash
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    TIME<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>date <span style="color:#e6db74">&#39;+%Y-%m-%d %H:%M:%S&#39;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>    cp <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.config/clash/config.yaml <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span><span style="color:#e6db74">/.config/clash/config.yaml.bak</span><span style="color:#e6db74">${</span>TIME<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    curl -L -o <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.config/clash/config.yaml <span style="color:#e6db74">${</span>CLASH_URL<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>    /usr/bin/clash
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vim /当前用户目录/.config/clash/stop-clash.sh
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># save this file to ${HOME}/.config/clash/stop-clash.sh</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># read pid file</span>
</span></span><span style="display:flex;"><span>PID<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>cat <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.config/clash/clash.pid<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>kill -9 <span style="color:#e6db74">${</span>PID<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>rm <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.config/clash/clash.pid
</span></span></code></pre></div><p>配置添加完成后，如果你的clash 正在运行中，需要重新加载配置文件并重启</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ systemctl daemon-reload
</span></span><span style="display:flex;"><span>$ sudo systemctl restart clash.service
</span></span></code></pre></div><p>这样每次启动clash时就会自动更新配置文件了，接下来通过crontab 自动重启 clash.service实现自动更新节点</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#新建shell文件</span>
</span></span><span style="display:flex;"><span>vim restart-clash.sh
</span></span></code></pre></div><p>新增一条命令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#/bin/sh</span>
</span></span><span style="display:flex;"><span>sudo systemctl restart clash.service
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x restart-clash.sh
</span></span><span style="display:flex;"><span>crontab -e
</span></span><span style="display:flex;"><span><span style="color:#75715e">#插入下面命令</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#每3小时重启一次</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span> */3 * * * restart-clash.sh
</span></span><span style="display:flex;"><span><span style="color:#75715e">#每分钟重启一次</span>
</span></span><span style="display:flex;"><span>* * * * * restart-clash.sh
</span></span></code></pre></div><p>大功告成，可通过<code>tail -500f /var/log/cron</code>查看定时任务是否执行</p>
<p><code>sudo systemctl status clash.service</code>  查看是否重启成功</p>
<h3 id="4docker内开代理">4、docker内开代理</h3>
<p>由于主要用来使用tg-bot，故只检测tgapi即可</p>
<p>1、判断宿主机可连接tgapi</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>curl -sX POST <span style="color:#e6db74">&#34;https://api.telegram.org/bot&#39;&#39;&#39;Your Token&#39;&#39;&#39;/sendMessage&#34;</span> -d <span style="color:#e6db74">&#34;chat_id=&#34;</span>Some Chat id<span style="color:#e6db74">&#34;&amp;text=hello&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -sX POST <span style="color:#e6db74">&#34;https://api.telegram.org/botxxxxxxxxugt5A/sendMessage&#34;</span> -d <span style="color:#e6db74">&#34;chat_id=48xxxxxx&amp;text=hello&#34;</span>
</span></span></code></pre></div><p>如果返回成功，即表示成功</p>
<p>2、进入容器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker exec -it jd_scripts /bin/sh
</span></span></code></pre></div><p>执行步骤1命令，如若响应时间长或失败，则需要配置代理</p>
<p>3、配置容器代理走宿主机</p>
<p><a href="https://docs.docker.com/network/proxy/#use-environment-variables">docker官方有教程</a></p>
<p>docker版本大于 17.07以上可用下面的方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd
</span></span><span style="display:flex;"><span>mkdir .docker
</span></span><span style="display:flex;"><span>vim  ~/.docker/config.json
</span></span></code></pre></div><p>填入下面json</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#34;proxies&#34;</span>:
</span></span><span style="display:flex;"><span> {
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#34;default&#34;</span>:
</span></span><span style="display:flex;"><span>   {
</span></span><span style="display:flex;"><span>     <span style="color:#f92672">&#34;httpProxy&#34;</span>: <span style="color:#e6db74">&#34;http://172.17.0.1:7890&#34;</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#f92672">&#34;httpsProxy&#34;</span>: <span style="color:#e6db74">&#34;http://172.17.0.1:7890&#34;</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#f92672">&#34;noProxy&#34;</span>: <span style="color:#e6db74">&#34;localhost,127.0.0.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">&#34;</span>
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>保存文件<strong>创建或者启动新容器时才生效</strong></p>
<p>这里有个大坑，搞了一天，就是</p>
<p><strong>代理的ip一定要写对！</strong></p>
<p><strong>代理的ip一定要写对！</strong></p>
<p><strong>代理的ip一定要写对!</strong></p>
<blockquote>
<p>下午调试的时候https的写成了127的了，机器启动起来，pull代码的时候，直接找不到文件，当时还骂这破代理，没法，就把报错ip不走代理了，没想到下面不报错了，直接无限重启，搞得头都大了，还在想是不是内存爆了呢！晚上，打开配置文件，定睛一看，WC！&ldquo;httpsProxy&quot;端口写的127&hellip;赶紧改了，重新跑遍，妥了，bot成功了！</p>
</blockquote>
<p>4、删除容器，重新启用</p>
<p>接下来在jd_scripts 目录内</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker-compose down
</span></span><span style="display:flex;"><span>docker-compose up -d
</span></span></code></pre></div><p>启动成功后，tgbot即可收到成功的消息，尽情享用吧！</p>
<h3 id="clash相关的管理命令">Clash相关的管理命令</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 启动Clash ##</span>
</span></span><span style="display:flex;"><span>sudo systemctl start clash.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## 重启Clash ##</span>
</span></span><span style="display:flex;"><span>sudo systemctl restart clash.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## 查看Clash运行状态 ##</span>
</span></span><span style="display:flex;"><span>sudo systemctl status clash.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## 实时滚动状态 ##</span>
</span></span><span style="display:flex;"><span>sudo journalctl -u clash.service -f
</span></span></code></pre></div><h3 id="docker相关命令">docker相关命令</h3>
<p><code>docker exec -it jd_scripts /bin/sh -c 'git -C /scripts pull &amp;&amp; node /scripts/jd_bean_change.js'</code>  手动运行一脚本</p>
<p><code>docker exec -it jd_scripts /bin/sh -c 'env'</code>  查看设置的环境变量</p>
<p><code>docker exec -it jd_scripts /bin/sh -c 'crontab -l'</code>  查看已生效的crontab_list定时器任务</p>
<p><code>docker exec -it jd_scripts sh -c &quot;docker_entrypoint.sh&quot;</code> 手动更新jd_scripts仓库最新脚本</p>
<p><code>docker exec -it jd_scripts /bin/sh</code> 仅进入容器命令</p>
<p><code>rm -rf  logs/*.log</code> 删除logs文件夹里面所有的日志文件</p>
<ul>
<li>[1] <a href="https://github.com/wisz2021/jd_docker">jd_docker</a></li>
<li>[2] <a href="https://github.com/yuanlam/Clash-Linux">clash安装参考</a></li>
<li>[3] <a href="https://kebingzao.com/2019/02/22/docker-container-proxy/">docker内代理参考</a></li>
<li>[4] <a href="https://akillcool.github.io/post/clash-with-auto-update-config/">clash自动更新订阅配置</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
