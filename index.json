[{"content":" 用docker部署nginx官方只给了docker版本的，没有compose的，只好自己转换一下了，记录一下，方便下次部署，这只是简单的部署，至于nginx配置的话，有空再补吧🫠\n 1、创建docker-nginx目录 新建 docker-compose.yml 文件\nmkdir docekr-nginx mkdir nginx mkdir log mkdir html vim docker-compose.yml 2、docker-compose.yml version: \u0026#39;3.3\u0026#39; services:  web:  image: nginx:latest  container_name: nginx  volumes:  - ./nginx:/etc/nginx  - ./log:/var/log/nginx  - ./html:/usr/share/nginx/html //网站放置目录  ports:  - \u0026#34;8081:80\u0026#34;  environment:  - NGINX_HOST=\u0026#34;192.168.116.10\u0026#34; //访问地址/域名  - NGINX_PORT=\u0026#34;80\u0026#34; //访问端口  - TZ=\u0026#34;Asia/Shanghai\u0026#34; //时区  restart: always 3、手动cp配置文件 由于官方image没有默认映射外部文件，需要手动把配置文件cp出来\n# 运行官方命令创建默认容器 docker run --name nginx -p 8080:80 -d nginx  #配置文件复制到nginx里,其他文件可用复制 docker cp nginx:/etc/nginx/ .nginx  #删除默认容器 docekr stop nginx \u0026amp;\u0026amp; docekr rm nginx 4、修改nginx配置文件 端口号、域名，ssl等和以前配置一样，不再赘述\n5、运行\u0026amp;测试 docekr-compose up -d  #查看日志 docekr-compose logs -f  #浏览器输入IP或域名查看是否可以访问  参考文档：\n 1、Docker Hub-nginx\n ","permalink":"https://blog.zsan.ml/posts/docker-build-nginx/","summary":"用docker部署nginx官方只给了docker版本的，没有compose的，只好","title":"Docker 部署 Nginx服务"},{"content":"何为信息茧房：\n 哈佛大学凯斯·桑斯坦教授在《信息乌托邦》一书中提出，人类社会存在一种“信息茧房”现象。他认为，在信息传播中人们自身的信息需求并非全方位的，只会注意选择想要的或能使自己愉悦的信息，久而久之接触的信息就越来越局限，越来越窄，就像蚕吐出来的丝一样，细细密密地把自己包裹起来，最终像一个蚕宝宝一样被桎梏在“信息茧房”内，失去对其他不同事物的了解能力和接触机会。当时，他的这一观点还只是作为一种推论和预测，但随着网络信息和人工智能技术的飞速发展，这种“信息茧房”现象，正越来越多地发生在现实生活中和我们的身边。\n 说人话就是：\n 在现如今的生活中，人们接受信息的来源（主要指生活在大陆，国外也差不多），主要从微信、微博、抖音、快手等中心化的平台，各家相互关闭自己的开放接口，强迫用户留在自己平台上，有时候只关注某个大V的信息，却不得不安装一个app，就这样手机上装了很多app（这些app们平均一周更新一次，要吐了）再加上平台的推荐算法，只推荐你喜欢的（兼听则明，偏信则暗），这样下去，整个人的认知无法被提高\n 经过一段时间的探索，搭建了RSS这套服务，RSS服务属于古老服务了，估计只有数字原住民才听说过，目前来说还可以，正在慢慢过渡，在此记录下搭建过程，方便下次迁移\n RSS（英文全称：RDF Site Summary 或 Really Simple Syndication[2]），中文译作简易信息聚合[3]，也称聚合内容[4]，是一种消息来源格式规范，用以聚合多个网站更新的内容并自动通知网站订阅者。使用 RSS 后，网站订阅者便无需再手动查看网站是否有新的内容，同时 RSS 可将多个网站更新的内容进行整合，以摘要的形式呈现，有助于订阅者快速获取重要信息，并选择性地点阅查看。\n ——引用wikipedia\n 准备：\n 需要一台服务器，运行linux即可    配置不用太大，我用的是阿里云的服务器，生活在大陆，国内访问比较快\n 用到的服务：\n RSSHub：一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。\nTTRSS：一款基于 PHP 的免费开源 RSS 聚合阅读器。\n 用rsshub生成官方没有的订阅源，ttrss来管理订阅源的阅读记录，支持各端同步\n一、部署RSSHub 支持docker部署，不过，我是部署到 Vercel 上的，好处是免费、国外的机子，真正连接到互联网的，国内可访问。\n1、注册 Vercel\n 有帐户的直接可以登录部署\n没有的先注册，建议用GitHub账号登录注册，github账号邮箱建议用gmail等国外的，通过率高，如果提示失败，可以和官方人员发email解封，我的当时就直接被冻结了，发了email后，一会就解封了，态度超好👍\n 2、成功后可以直接点去部署了，我是没有用官方的库部署，fork官方库后去授权部署的，效果一样，vercel 用默认的就行，等待一会，撒花，表示部署成功\n3、直接访问域名成功打开即部署成功\n4、rsshub配置环境可参考 部署 | RSSHub 配置\n  用户认证\n  日志配置\n  其他一些服务需要的api-key\n  5、在vercel 配置完 重新部署服务，才生效\n更新 支持vercel自动拉取代码更新\n二、部署TTRSS 部署到vps 阿里云上，支持docker、docker-composr即可\ndocker-compose部署  下载 docker-compose.yml至任意目录。 更改 docker-compose.yml 中的设置，请务必更改 postgres 用户密码。 通过终端在同目录下运行 docker-compose up -d 后等待部署完成。 默认通过 181 端口访问 TTRSS，默认账户：admin 密码：password，请第一时间更改。 wangqiru/mercury-parser-api 及 wangqiru/opencc-api-server 为支持高级功能而加入的可选服务类容器，删除不会影响 TTRSS 基础功能。  SELF_URL_PATH: TTRSS 实例地址。🔴 请注意，该变量值必须与你在浏览器中用于访问 TTRSS 的 URL 保持完全一致，否则 TTRSS 将无法启动。\n这里说明一下，如果没有域名就要配置为 ip:端口号 的形式\n更多配置参考 官方文档\n更新 推荐使用手动更新\n #自用  docker-compose pull  #官方推荐  docker pull wangqiru/ttrss:latest  # docker pull wangqiru/mercury-parser-api:latest  # docker pull wangqiru/opencc-api-server:latest  docker-compose up -d # 如果您没有使用 docker-compose，我确信您知道该怎么做。 备份 养成定期备份的习惯，有些订阅源很重要的资料可以永久保存，避免404\n  复制 Postgres 数据卷 ~/postgres/data/（或者你在 docker-compose 中指定的目录）至其他任何地方作为备份，这非常重要！\n  执行如下命令来导出所有数据：\n  #docker exec postgres pg_dumpall -c -U 数据库用户名 \u0026gt; export.sql docker exec postgres pg_dumpall -c -U postgres \u0026gt; export.sql  执行如下命令来导入所有数据：  #cat export.sql | docker exec -i postgres psql -U 数据库用户名 cat export.sql | docker exec -i postgres psql -U postgres 三、客户端推荐 服务端都配置好了，接下来就是如何阅读了\niOS/macOS：Reeder 5 内置的 Fever API 模拟插件 可以使用\nandroid：FeedMe\nWeb：直接网页登录查看即可\n四、订阅源订阅小技巧 服务都搭建好了，下面就该订阅订阅源了，分享一些小技巧\n  微博的可以使用 Weibo to RSS 订阅\n  微信的封锁严重，rsshub订阅有限，可以用 公众号列表 | 微信公众号转RSS服务 来订阅，如果没有想订阅的，可以提 提交新公众号前看这里 · Issue #7 · ttttmr/wechat2rss · GitHub\n  blogspot的rsshub没有提供，可以用cf反代后订阅\n  twitter 的开发者api太难申请了，可以用 nitter 输出的rss 访问困难再结合cf反代，完美\n  以上，一个低成本，服务稳定，数据可控RSS生态部署成功，尽情享用吧！🎉\n 参考文档：\n RSSHub\n🐋 Awesome TTRSS | 🐋 Awesome TTRSS\n我有特别的 RSS 使用技巧\n我的RSS解决方案 - alpaca++\n警惕陷入“信息茧房” - 中华人民共和国国防部\n信息茧房 - MBA智库百科\nRSS 维基百科\n ","permalink":"https://blog.zsan.ml/posts/rss-build/","summary":"何为信息茧房： 哈佛大学凯斯·桑斯坦教授在《信息乌托邦》一书中提出，人类社会存在一种“","title":"打破信息茧房"},{"content":" 最近遇到一个很有点麻烦的事，以前在国内机上装了clash代理，用的编译包安装的，后来感觉用的不爽，就给卸载了，服务也去了，但是proxy代理经常会自动设置，有时候手动给取消了，下次再用又有了，这次终于忍不了了，就搜了一下给解决了\n 1、定位bug export 查看下，有相应端口，手动取消后，再查看没有了，重启后又有了，判断是某个脚本里带相关命令\n2、搜索资料 通过查找得知有个.bashrc文件也可以设置环境变量，只对当前用户有效，vim进去看了下，果然有相应命令，删除，重启，再export，代理没了，结束🎉\n","permalink":"https://blog.zsan.ml/posts/linux-unset-proxy/","summary":"最近遇到一个很有点麻烦的事，以前在国内机上装了clash代理，用的编译包安装的，后来","title":"Linux设置代理"},{"content":" 对于商品比价是个不错的购买商品的方法，可以给我们是否值得入手这件商品提供决策。各大商城有这方面数据但不会免费给分享出来，第三方网站有相关服务，但体验不好，相关api也太贵，这次找到了大佬免费提供的对话bot的比价助手——傻妞助手，应该是内置比价api吧！目前来说数据还可以值得参考的，用了docker部署，很快搞定！\n 一、部署傻妞助手bot 项目地址：GitHub - cdle/sillyGirl: 傻妞机器人\n一键安装：支持linux arm64和amd64位 cd /opt s=sillyGirl;a=arm64;if [[ $(uname -a | grep \u0026#34;x86_64\u0026#34;) != \u0026#34;\u0026#34; ]];then a=amd64;fi ;if [ ! -d $s ];then mkdir $s;fi ;cd $s;wget https://github.com/cdle/${s}/releases/download/main/${s}_linux_$a -O $s \u0026amp;\u0026amp; chmod 777 $s;pkill -9 $s;$(pwd)/$s 在目录/etc/sillyGirl下新建sets.conf可以进行初始化配置\n主要是配置管理员账号等，也可以通过对话配置\n### 一些基础设置 ### # 傻妞机器人名 set sillyGirl name 傻妞 # 傻妞http服务端口 set sillyGirl port 800   # 傻妞消息撤回等待时间，单位秒 set sillyGirl duration 5 # 傻妞自动升级是否通知 set sillyGirl update_notify true # 是否开启傻妞自动更新 set sillyGirl auto_update false # 傻妞内置赞赏码 set sillyGirl appreciate https://gitee.com/aiancandle/sillyGirl/raw/main/appreciate.jpg #是否启动http服务 set sillyGirl enable_http_server true # 关闭守护模式，守护模式会导致没法自动升级 #systemctl disable sillyGirl  ### 对接青龙的设置 ### # 设置青龙openapi的client_id参数 #set qinglong client_id ? # 设置青龙openapi的client_secret参数 #set qinglong client_secret ? # 青龙是否开启自动隐藏重复任务功能 #set qinglong autoCronHideDuplicate true # 设置青龙面板地址 #set qinglong host http://127.0.0.1:5700  ### 对接QQ的设置 ### # 设置qq登录账号 #set qq uin ? # 设置qq登录密码 #set qq password ? # 设置qq临时消息默认群号 #set qq tempMessageGroupCode ? # 指定要监听的qq群 #set qq onGroups g1\u0026amp;g2\u0026amp;g3... # 设置是否自动同意好友请求 #set qq auto_friend false # 设置是否对监听自身消息 #set qq onself true # 设置qq管理员 #set qq masters q1\u0026amp;q2\u0026amp;q3... # 设置接受通知的qq账号 #set qq notifier q1\u0026amp;q2\u0026amp;q3... # 设置qq设备信息(自动生成) #set qq device.json ? # 设置qq登录令牌(自动生成) #set qq session.token ? # 注销qqbot命令，重新运行扫码即可 #delete qq session.token # 指定系统通知发送对象命令，如不设置默认发送给所有管理员。 #set [im type] notifiers [accounts join by \u0026#39;\u0026amp;\u0026#39;]  ### 对接telegram的设置 ### # 设置telegram机器人token #set tg token ? # 设置telegram机器人代理 #set tg http_proxy ? # 设置telegram机器人管理员 #set tg masters t1\u0026amp;t2\u0026amp;t3... # 设置接受通知的telegram账号 #set tg notifier t1\u0026amp;t2\u0026amp;t3...  ### 对接微信公众号的设置 ### # 设置微信公众平台app_id #set wxmp app_id ? # 设置微信公众平台app_secret #set wxmp app_secret ? # 设置微信公众平台token #set wxmp token ? # 设置微信公众平台encoding_aes_key #set wxmp encoding_aes_key ? # 设置微信公众平台管理员 #set wxmp masters w1\u0026amp;w2\u0026amp;w3... # 设置公众号关注事件回复 #set wxmp subscribe_reply 感谢关注！ # 设置公众号默认回复 #set wxmp default_reply 无法回复该消息  ### 对接微信号的设置 ### # 傻妞内置微信插件，依赖于可爱猫和http-sdk # 傻妞远程处理接口 /wx/receive # 设置插件调用地址，确保傻妞可以访问可爱猫端口 #set wx api_url ? # 设置图片转发模式，否则可能会出现此图片来自xx未经允许不得使用的提示 set wx relay_mode true # 设置指定转发地址，格式为 https://域名/relay?url=%s，不知道不用填 #set wx relaier ? # 设置# 傻妞是否动态网络地址，适用于# 傻妞家庭宽带而可爱猫在云服务器的情况下 #set wx sillyGirl_dynamic_ip true # 设置可爱猫是否动态网络地址，适用于可爱猫家庭宽带而# 傻妞在云服务器的情况下 #set wx keaimao_dynamic_ip true # 设置可爱猫端口 #set wx keaimao_port ? # 设置微信管理员 #set wx masters ? # vlw的API调用地址 #set wx vlw_addr http://ip:port # vlw的token #set wx vlw_token ?  ### 对接pushplus的设置 ### # 管理员推送绑定pushplus指令 #set sillyGirl pushplus [token]  # 关键词撤回功能，关键词支持正则表达式。 #set sillyGirl recall 关键词1\u0026amp;关键词2... # 关键词回复功能，第一个问号是支持正则的关键词，第二个问号是回复的内容。 #set reply ? ?  ### 对接芝士的设置 ### # 资产推送定时，以九点为例，包括失效提醒。 set jd_cookie asset_push 0 9 * * *  # 设置阿东登录地址，例：set jd_cookie adong_addr 192.168.1.1:5702 #set jd_cookie adong_addr 阿东ip:端口 # 设置阿东qq机器人账号，这里的机器人qq账号，请务必和阿东go-cqhttp配置中config.yml里qq一样。 #set jd_cookie selfQid 机器人qq账号 # 设置登录坑位 #set jd_cookie login_num ?  #设置诺兰登陆地址 #set jd_cookie nolan_addr http://诺兰ip:端口  # 对接xdd，额外设置参数 #set jd_cookie xdd_token ?  ### 对接小爱同学的设置 ### # 小爱同学，可以指定API，对小爱说对话模式即可开启连续对话模式，闭嘴可关闭。 #set sillyGirl 小爱同学 http://81.70.100.130/api/xiaoai.php?msg=%s\u0026amp;n=text #挂了就自己换 #set sillyGirl 小爱同学 http://jiuli.xiaoapi.cn/i/xiaoai_tts.php?msg=%s #挂了就自己换 # 处理json格式数据的小爱api，不填获取整个文本 #set sillyGirl 小爱同学gjson text # 删除处理json格式数据的小爱api #silly delete 小爱同学gjson # 使用方法： #1、唤起小爱：发送“小爱+想说的话”，例如：小爱今天天气。 #2、对话模式：发送“小爱对话模式”开启，发送“闭嘴”结束。 #3、成语接龙：发送“成语接龙”开始。这个可应该不是小爱同学的功能，但我懒得单独写它了。  ### 对接短网址的设置 ### # 设置短网址服务地址，填傻妞对外的可以访问的地址。 #set dwz address ? # 设置短网址服务前缀 #set dwz prefix d # 使用方法 #发送“短网址+你想要转换的网址“ #例：短网址 http://kejiwanjia.com/ 启动命令 配置完成后，在/opt/sillyGirl下执行 ./sillyGirl -t 查看是否运行成功\n输入 time\n成功后 执行 ./sillyGirl -d 后台运行\n其他常用命令 杀掉进程\nps -A|grep sillyGirl kill pid 查看端口是否开启\nnetstat -tlan 二、部署node-onebot  傻妞开发者把内置qq登录给去掉了，需要自己对接qqbot\n官方给的是node安装的，需要安装node环境，太麻烦，改为用docker安装\n 1、拉取代码 //国外机 git clone https://github.com/takayama-lily/node-onebot  //国内机  git clone https://ghproxy.realproxy.workers.dev/https://github.com/takayama-lily/node-onebot 机 2、修改Dockerfile文件 修改默认Dockerfile里面最后一行的QQ号成自己的bot账号\nFROM node:14-alpine WORKDIR /app COPY . . CMD [\u0026#34;node\u0026#34;, \u0026#34;main\u0026#34;,\u0026#34;这里改为自己的bot账号\u0026#34;] 3、创建config.js文件 cp config.sample.js config.js \u0026#34;use strict\u0026#34;; // 将此文件更名为config.js才能生效哦  module.exports = {   //通用配置  general: {  platform: 5, //1:安卓手机 2:aPad 3:安卓手表 4:MacOS 5:iPad  debug: false, //开启debug  use_cqhttp_notice: true, //是否使用cqhttp标准的notice事件格式   host: \u0026#34;localhost\u0026#34;, //监听主机名  port: 5700, //端口  use_http: false, //启用http  use_ws: false, //启用正向ws，和http使用相同地址和端口  access_token: \u0026#34;\u0026#34;, //访问api的token  secret: \u0026#34;\u0026#34;, //上报数据的sha1签名密钥  post_timeout: 30, //post超时时间(秒)  post_message_format:\u0026#34;array\u0026#34;, //\u0026#34;string\u0026#34;或\u0026#34;array\u0026#34;  enable_cors: false, //是否允许跨域请求  enable_heartbeat: false, //是否启用ws心跳  heartbeat_interval: 15000, //ws心跳间隔(毫秒)  rate_limit_interval:500, //使用_rate_limited后缀限速调用api的排队间隔时间(毫秒)  event_filter: \u0026#34;\u0026#34;, //json格式的事件过滤器文件路径  post_url: [ //上报地址，可以添加多个url  // \u0026#34;http://your.address.com:80\u0026#34;,  ],  ws_reverse_url: [ //反向ws地址，可以添加多个url  \u0026#34;ws://127.0.0.1:8080/qq/receive\u0026#34;,  //这是傻妞的反向链接地址，其中的8080端口记得改成你傻妞的端口，同时开启傻妞的傻妞的http server，即set sillyGirl enable_http_server true  ],  ws_reverse_reconnect_interval: 3000, //反向ws断线重连间隔(毫秒)，设为负数直接不重连  ws_reverse_reconnect_on_code_1000: true, //反向ws是否在关闭状态码为1000的时候重连  },   //每个账号的单独配置(用于覆盖通用配置)  147258369: {   }, };  // 安全注意： // 监听0.0.0.0表示监听网卡上的所有地址。如果你的机器可以通过公网ip直接访问，同时你也没有设定access_token，则被认为是极不安全的。 // 你应该知道这样做会导致以下后果：任何人都可以无限制地访问你的Bot的所有API接口。 // 如果只需要在本地访问，建议将监听地址改为localhost。需要通过公网访问，你最好设定access_token。 终极防风控：\n\u0026#34;use strict\u0026#34;; // 将此文件更名为config.js才能生效哦  module.exports = {   //通用配置  general: {  platform: 3, //1:安卓手机 2:aPad 3:安卓手表 4:MacOS 5:iPad  debug: false, //开启debug  use_cqhttp_notice: true, //是否使用cqhttp标准的notice事件格式   host: \u0026#34;localhost\u0026#34;, //监听主机名  port: 5700, //端口  use_http: false, //启用http  use_ws: false, //启用正向ws，和http使用相同地址和端口  access_token: \u0026#34;\u0026#34;, //访问api的token  secret: \u0026#34;\u0026#34;, //上报数据的sha1签名密钥  post_timeout: 30, //post超时时间(秒)  post_message_format:\u0026#34;array\u0026#34;, //\u0026#34;string\u0026#34;或\u0026#34;array\u0026#34;  enable_cors: false, //是否允许跨域请求  enable_heartbeat: false, //是否启用ws心跳  heartbeat_interval: 15000, //ws心跳间隔(毫秒)  rate_limit_interval:500, //使用_rate_limited后缀限速调用api的排队间隔时间(毫秒)  event_filter: \u0026#34;\u0026#34;, //json格式的事件过滤器文件路径  post_url: [ //上报地址，可以添加多个url  // \u0026#34;http://your.address.com:80\u0026#34;,  ],  ws_reverse_url: [ //反向ws地址，可以添加多个url  \u0026#34;ws://127.0.0.1:8080/qq/receive\u0026#34;,  //这是傻妞的反向链接地址，其中的8080端口记得改成你傻妞的端口，同时开启傻妞的傻妞的http server，即set sillyGirl enable_http_server true  ],  ws_reverse_reconnect_interval: 3000, //反向ws断线重连间隔(毫秒)，设为负数直接不重连  ws_reverse_reconnect_on_code_1000: true, //反向ws是否在关闭状态码为1000的时候重连  },   //每个账号的单独配置(用于覆盖通用配置)  147258369: {   }, };  // 安全注意： // 监听0.0.0.0表示监听网卡上的所有地址。如果你的机器可以通过公网ip直接访问，同时你也没有设定access_token，则被认为是极不安全的。 // 你应该知道这样做会导致以下后果：任何人都可以无限制地访问你的Bot的所有API接口。 // 如果只需要在本地访问，建议将监听地址改为localhost。需要通过公网访问，你最好设定access_token。 4、编译docker image docker build -t yongs/node-onebot:latest . yongs自定义的，随便起，一定不要忘了 最后有个 . 表示在当前目录文件编译\n5、启动image 用的是docker-compose启动的，刚才拉的代码已经有yaml文件了，\n需要注意 image名字是刚才编译的名字，不知道可以用\ndocker images 查看，修改image名字即可\nversion: \u0026#34;3\u0026#34; services:  miraiok:  image: yongs/node-onebot  restart: always  network_mode: \u0026#34;host\u0026#34;  volumes:  - ./config.js:/root/config.js  - ./data:/app/data  stdin_open: true  tty: true  container_name: docker-onebot docker-compose up -d 6、查看日志，扫码登录，不能登录进入容器内扫码 #查看日志 docker logs -f -n 500 docker-onebot #进入容器 docker exec -it docker-onebot /bin/sh #执行登录 node main \u0026#34;botqq号\u0026#34; 给小助手发送命令看是否成功，比如 发送 name\n发送 淘宝京豆拼多多链接看是否回复，回复即部署成功。\n登录成功后，重启docker即可\n这里的坑就是傻妞启动失败，导致onebot连接不上傻妞。\n7、群被风控的解决办法 参考了大佬的解决办法风控解除最终版\n  开启设备锁，账号设置里面的\n  删除session.token 我是直接把整个账号文件夹删了\n  切换安卓协议 1或者3 我用的3\n  填写密码登陆\n  需要验证信息，根据提示一步一步操作即可（链接推荐在Chrome里打开查找）\n   参考链接：\n1、群晖傻妞SillyGirl完整部署教程 12.13更新node-onebot - 科技玩家\n2、Docker编译node-onebot，傻妞又活了 - 科技玩家\n3、GitHub - AboutCXJ/SillyGirlDockerDeploy\n ","permalink":"https://blog.zsan.ml/posts/comparison-robot-building-for-docker/","summary":"对于商品比价是个不错的购买商品的方法，可以给我们是否值得入手这件商品提供决策。各大商","title":"比价助手机器人docker快速部署"},{"content":"config配置文件里加上如下参数：\nfrontmatter:  lastmod:  - lastmod  - :git  - :fileModTime  - :default 依次取的顺序为：\n lastmod :最后提交时间\n:git: 根据git提交版本时间\n:fileModTime：文件修改时间\n Configure Hugo | Hugo 写的都有,but是英文的🙃\n","permalink":"https://blog.zsan.ml/posts/hugo-auto-update-lastmod/","summary":"config配置文件里加上如下参数： frontmatter: lastmod: - lastmod - :git - :fileModTime - :default 依次取的顺序为： lastmod :最后提交","title":"Hugo 自动更新文章修改时间"},{"content":"在linuxserver服务器上安装\n环境：docker、docker- compose\n需要了解docker基本知识，不懂可以翻翻以前的博客或者搜下教程学习\nfilebrowser官网上给的是docker命令执行的，但用compose习惯了，所以转换了一下格式，但是这里有个坑，官网也提示了\n By default, we already have a configuration file with some defaults so you can just mount the root and the database. Although you can overwrite by mounting a directory with a new config file. If you don\u0026rsquo;t already have a database file, make sure to create a new empty file under the path you specified. Otherwise, Docker will create an empty folder instead of an empty file, resulting in an error when mounting the database into the container.\n 翻译过来就是需要提前创建所需的文件和文件夹，否则，Docker会创建一个空的文件夹而不是空的文件，导致在将数据库挂载到容器中时出现错误！这点一定要注意啊！！！\n1、创建docker-compose文件 内容如下：\nversion: \u0026#39;3.3\u0026#39; services:  filebrowser:  image: filebrowser/filebrowser:s6  container_name: filebrowser  volumes:  - ./root:/srv  - ./database/filebrowser.db:/database/filebrowser.db  - ./settings.json:/config/settings.json  environment:  - PUID=0  - PGID=0  ports:  - \u0026#39;8080:80\u0026#39;  restart: always 2、创建默认文件和文件夹 对照上述docker-compose的路径，需要在当前目录创建 settings.json 文件，内容如下：\n{  \u0026#34;port\u0026#34;: 80,  \u0026#34;baseURL\u0026#34;: \u0026#34;\u0026#34;,  \u0026#34;address\u0026#34;: \u0026#34;0.0.0.0\u0026#34;,  \u0026#34;log\u0026#34;: \u0026#34;stdout\u0026#34;,  \u0026#34;database\u0026#34;: \u0026#34;/database/filebrowser.db\u0026#34;,  \u0026#34;root\u0026#34;: \u0026#34;/srv\u0026#34; } 在当前目录创建 database/filebrowser.db 文件夹和文件\nmkdir database cd database touch filebrowser.db 3、运行测试是否成功 执行 docker- compose logs -f 看下日志是否报错\n需要其他机器访问记得防火墙 把端口打开，本例用的8080端口\n浏览器访问 服务器ip:8080 成功打开即可，Enjoy it！🎉🎉🎉\n4、n1小钢炮安装  灯大魔改的好久没更新了，功能好多不支持了，今天给升级（踩坑）了一下\n 1、docker-compose需要改下配置\nversion: \u0026#39;3.3\u0026#39; services:  filebrowser:  image: filebrowser/filebrowser  container_name: filebrowser  volumes:  - /media:/srv  - ./database/filebrowser.db:/database/filebrowser.db  - ./settings.json:/config/settings.json  - /etc/timezone:/etc/timezone #时区 cst  - /etc/localtime:/etc/localtime #时区 cst   environment:  - PUID=1002  - PGID=100  # - TZ=Asia/Shanghai  ports:  - \u0026#39;8081:80\u0026#39;  restart: always 2、灯大版的移除，执行这个即可\n两个小坑，1、镜像要用laster的 2、时区设置用挂载的\n 参考：\n1、filebrowser官网\n2、filebrowser 一个跨平台的文件管理器的使用方法-森林的个人博客\n ","permalink":"https://blog.zsan.ml/posts/docker-deploy-filebrowser/","summary":"在linuxserver服务器上安装 环境：docker、docker- compose 需要了解do","title":"Docker Compose部署filebrowser"},{"content":" 欢迎来到我的小站呀，很高兴遇见你！🤝\n 🏠 关于本站 这里主要记录一些平常遇到的一些技术坑，方便以后可以查阅😄\n本站最开始是2019年就搭建了，当时用的hexo构建，部署在github，用netlify缓存服务，无奈当时穷，用的还是Windows本，用命令太不爽了，导致写文章没什么激情，基本断更🤣\n来到2021年，经常在网上看大佬们的blog，时间有点空，就想把blog给拾起来，接触的技术也多了，也想记录下一些笔记，方便后面随时翻阅，正好在推上看到大佬们推荐gridea: ✍️ A static blog writing client (一个静态博客写作客户端)\n傻瓜式操作，根据界面提示设置就行了，专注于写作，当时就下下来用了一段时间，也有比较鸡肋的地方，比如主题太少，自定义空间太小，还有就是windows7上不太稳定，有时会卡，可能我电脑垃圾吧，主题太少，有的主题不支持侧边目录栏，当时搜了好多文章，才改了一下主题，具体看这篇，还有就是，作者好久不更新了，专注于搞web端了，所以就在换了Mac后就换了到hugo上\nhugo用go开发的，据说生成文章非常快，相比hexo来说，hugo在Mac上用命令也很舒服，主题也很多，所以就果断换了上来，专注写作，主题用的papermod，这是国外开发者开发的，中文资料太少，不过，搜了好多大佬的文章，基本上调试ok；还是用github做仓库来提供服务，用markdown来写文章，vs code来配置文件，在freenom上白嫖的一年域名，用脚本自动监控，到期提示；用cf来做域名解析和缓存服务。\n👨‍💻 张三是谁 孤独时代的蚂蚁\n克莱登大学毕业\n","permalink":"https://blog.zsan.ml/about/","summary":"欢迎来到我的小站呀，很高兴遇见你！🤝 🏠 关于本站 这里主要记录一些平常遇到的一些技术坑，","title":"About"},{"content":"看过前面的文章知道，大佬的库仓库也锁了，不能pull，只能换取仓库地址才行，为了一劳永逸，索性换了自己的库，只谈技术，不谈其他\u0026hellip;\n1、创建Dockerfile文件 比较懒，直接把大佬的Dockerfile拉来换了仓库地址，rsa记着也要换\n换完在当前目录 docker build -t jd_scripts .\n直接生成自己的image\ndocker images 查看镜像\n2、修改docker-compose文件 修改docker-compose里面的仓库地址为自己的地址，其他参数不用变\ndocker-compose up -d 启动镜像\n完美运行！\n继续躺平。\n建议学学docker，真的好强大！\n附上一个不错的docker教程\nDocker —— 从入门到实践\n","permalink":"https://blog.zsan.ml/posts/docker-generate-image/","summary":"看过前面的文章知道，大佬的库仓库也锁了，不能pull，只能换取仓库地址才行，为了一劳","title":"docker 生成自己的镜像"},{"content":"修改主题文件支持侧边栏目录\nsimple主题整体还行，但文章无侧边栏目录，一般写的技术性文章很长，就需要侧边栏目录和这个功能了，在网上搜了一下资料，对于前端小学生的我费了好长时间才搞定，记录一下过程。\n1、修改post.ejs文件 head新增\n\u0026lt;script src=\u0026quot;https://cdn.bootcss.com/highlight.js/9.12.0/highlight.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n搜索\u0026lt;%- post.content %\u0026gt;复制一下代码覆盖copy\n\u0026lt;div class=\u0026#34;post-content-wrapper\u0026#34;\u0026gt;  \u0026lt;div class=\u0026#34;post-content\u0026#34; v-pre\u0026gt;  \u0026lt;%- post.content %\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;div class=\u0026#34;toc-container\u0026#34;\u0026gt;  \u0026lt;%- post.toc %\u0026gt;  \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 新增高亮js\n\u0026lt;script\u0026gt;  hljs.initHighlightingOnLoad()   let mainNavLinks = document.querySelectorAll(\u0026#34;.markdownIt-TOC a\u0026#34;);   // This should probably be throttled.  // Especially because it triggers during smooth scrolling.  // https://lodash.com/docs/4.17.10#throttle  // You could do like...  // window.addEventListener(\u0026#34;scroll\u0026#34;, () =\u0026gt; {  // _.throttle(doThatStuff, 100);  // });  // Only not doing it here to keep this Pen dependency-free.   window.addEventListener(\u0026#34;scroll\u0026#34;, event =\u0026gt; {  let fromTop = window.scrollY;   mainNavLinks.forEach((link, index) =\u0026gt; {  let section = document.getElementById(decodeURI(link.hash).substring(1));  let nextSection = null  if (mainNavLinks[index + 1]) {  nextSection = document.getElementById(decodeURI(mainNavLinks[index + 1].hash).substring(1));  }  if (section.offsetTop \u0026lt;= fromTop) {  if (nextSection) {  if (nextSection.offsetTop \u0026gt; fromTop) {  link.classList.add(\u0026#34;current\u0026#34;);  } else {  link.classList.remove(\u0026#34;current\u0026#34;);  }  } else {  link.classList.add(\u0026#34;current\u0026#34;);  }  } else {  link.classList.remove(\u0026#34;current\u0026#34;);  }  });  });   \u0026lt;/script\u0026gt; 2、客户端新增自定义css .toc-container .markdownIt-TOC {  position: sticky;  top: 32px;  width: 200px;  font-size: 12px;  list-style: none;  padding-left: 0;  padding: 16px 8px;  } .toc-container .markdownIt-TOC:before {  content: \u0026#34;\u0026#34;;  position: absolute;  top: 0;  left: 8px;  bottom: 0;  width: 1px;  background-color: #ebedef;  opacity: .5;  } .toc-container ul {  list-style: none;  } .toc-container li {  padding-left: 16px; } .toc-container li a {  color: #868e96;  padding: 4px;  display: block;  transition: all 0.3s;  } .toc-container li a:hover {  background: #cddbef;  } .toc-container li a.current {  color: #006CFF;  background: #fafafa;  } .post-content-wrapper { display: flex; } .post-content { width: 100%; margin-right: 20px; } @media (max-width: 1150px) {  .toc-container {  display: none;  } } 3、修改main.css文件 搜索.post-detail 修改margin: 0 auto;为\nmargin: 0 20px;\n重新渲染网页即可尽情享用吧！\n","permalink":"https://blog.zsan.ml/posts/girde-simple-support-for-sidebar-directory/","summary":"修改主题文件支持侧边栏目录 simple主题整体还行，但文章无侧边栏目录，一般写的技术","title":"girde simple修改添加支持侧边栏目录"},{"content":"使用docker部署自动领金豆bot脚本\n使用的版本：\n服务器：centos 8\ndocker： 20.10.6\ndocker-compose： 1.27.4\n1、服务器安装docker，docker-compose 推荐使用centos服务器安装docker、docker-compose\nDocker安装\n 国内一键安装 curl -sSL https://get.daocloud.io/docker | sh 国外一键安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun  docker-compose安装\n$ sudo curl -L \u0026quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\u0026quot; -o /usr/local/bin/docker-compose\n要安装其他版本的 Compose，请替换 1.24.1。\n最新发行的版本地址：https://github.com/docker/compose/releases。\n将可执行权限应用于二进制文件：\n$ sudo chmod +x /usr/local/bin/docker-compose\n创建软链：\n$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n通过docker-compose version查看docker-compose版本，确认是否安装成功。\n2、安装jd_scripts 创建一个目录jd_scripts用于存放备份配置等数据，迁移重装的时候只需要备份整个jd_scripts目录即可\n需要新建的目录文件结构参考如下:\njd_scripts ├── logs │ ├── XXXX.log │ └── XXXX.log ├── my_crontab_list.sh └── docker-compose.yml  jd_scripts/logs建一个空文件夹就行 jd_scripts/docker-compose.yml 参考内容如下(自己动手能力不行搞不定请使用默认配置)：  根据文档一步一步下去就ok了，下面主要记录下可能用到的命令\n目录文件配置好之后在 jd_scripts目录执行。\ndocker-compose up -d 启动（修改docker-compose.yml后需要使用此命令使更改生效）；\ndocker-compose logs 打印日志；\ndocker-compose logs -f 打印日志，-f表示跟随日志； docker logs -f jd_scripts 和上面两条相比可以显示汉字； docker-compose pull 更新镜像；\ndocker-compose stop 停止容器；\ndocker-compose restart 重启容器；\ndocker-compose down 停止并删除容器；\n3、开代理机器，激活tg-bot 这里是个大坑，拿个小本本记下来，其实就是docker内代理宿主机代理的问题\n由于众所周知的原因，国内的机器不能访问tg，而又想使用tg-bot来控制，无奈，国外机子太贵（穷），最低也要5美刀！遂买国内机子开代理使用\n1、买国内机器，推荐大厂的 这里应该放各大厂的aff的，留个坑\n2、安装clash 一直在使用clash，直接网上搜索clash下载，找到对应版本下载，博主用的是centos，下载linux-amd64的\n1、下载clash，最新版本可去官网找\nwget https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-amd64-v0.19.0.gz 2、解压\ngzip -d clash-linux-amd64-v0.19.0.gz 3、移动至usr/bin/clash并重命名为clash\nsudo mv clash-linux-amd64-v0.19.0 /usr/bin/clash 4、赋予clash运行权限\nsudo chmod +x /usr/bin/clash 5、检查是否安装成功\nclash -v 3、创建配置文件、安装控制面板 1.创建配置文件目录\nmkdir -p /etc/clash/ 2.进入目录\ncd /etc/clash/ 3.创建配置文件\nvim config.yaml 4.手动编辑很麻烦，可用winscp上传\n配置参数自行查找\n5.下载前端代码\nwget https://github.com/Dreamacro/clash-dashboard/tree/gh-pages 6.解压\nunzip gh-pages.zip 7.修改目录名,这里的目录名是上面配置文件里的 external-ui: dashboard\nmv clash-dashboard-gh-pages dashboard 可用这个面板远程控制\n4、设置clash开机启动 1.创建service文件\nsudo vim /usr/lib/systemd/system/clash.service 2.输入下面代码\n[Unit] Description=clash proxy After=network.target  [Service] Type=simple ExecStart=/usr/bin/clash -d /etc/clash  [Install] WantedBy=multi-user.target 3.重新加载 systemd 模块\nsudo systemctl daemon-reload 4.启动Clash\nsudo systemctl start clash.service 5.设置Clash开机自启动\nsudo systemctl enable clash.service 6.判断是否成功开启代理\ncurl -I https://www.google.com 返回200即表示代理已经成功\n5、自动更新订阅配置文件  通过shell脚本自动更新Clash在线配置\n 通过systemctl来管理Clash的进程，对应clash.service文件，通过两个脚本start-clash.sh和stop-clash.sh来管理Clash的启停：\n把上面的配置文件修改下：\nvim /usr/lib/systemd/system/clash.service [Unit] Description=clash proxy After=network.target  [Service] WorkingDirectory=/当前用户目录/.config/clash Type=simple ExecStart=/当前用户目录/.config/clash/start-clash.sh ExecStop=/当前用户目录/.config/clash/stop-clash.sh Environment=\u0026#34;HOME=/当前用户目录\u0026#34; Environment=\u0026#34;CLASH_URL=你的订阅链接\u0026#34;  [Install] WantedBy=multi-user.target vim /当前用户目录/.config/clash/start-clash.sh #!/bin/bash # save this file to ${HOME}/.config/clash/start-clash.sh  # save pid file echo $$ \u0026gt; ${HOME}/.config/clash/clash.pid  diff ${HOME}/.config/clash/config.yaml \u0026lt;(curl -s ${CLASH_URL}) if [ \u0026#34;$?\u0026#34; == 0 ] then  /usr/bin/clash else  TIME=`date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;`  cp ${HOME}/.config/clash/config.yaml \u0026#34;${HOME}/.config/clash/config.yaml.bak${TIME}\u0026#34;  curl -L -o ${HOME}/.config/clash/config.yaml ${CLASH_URL}  /usr/bin/clash fi vim /当前用户目录/.config/clash/stop-clash.sh #!/bin/bash # save this file to ${HOME}/.config/clash/stop-clash.sh  # read pid file PID=`cat ${HOME}/.config/clash/clash.pid` kill -9 ${PID} rm ${HOME}/.config/clash/clash.pid 配置添加完成后，如果你的clash 正在运行中，需要重新加载配置文件并重启\n$ systemctl daemon-reload $ sudo systemctl restart clash.service 这样每次启动clash时就会自动更新配置文件了，接下来通过crontab 自动重启 clash.service实现自动更新节点\n#新建shell文件 vim restart-clash.sh 新增一条命令\n#/bin/sh sudo systemctl restart clash.service chmod +x restart-clash.sh crontab -e #插入下面命令 #每3小时重启一次 0 */3 * * * restart-clash.sh #每分钟重启一次 * * * * * restart-clash.sh 大功告成，可通过tail -500f /var/log/cron查看定时任务是否执行\nsudo systemctl status clash.service 查看是否重启成功\n4、docker内开代理 由于主要用来使用tg-bot，故只检测tgapi即可\n1、判断宿主机可连接tgapi\ncurl -sX POST \u0026#34;https://api.telegram.org/bot\u0026#39;\u0026#39;\u0026#39;Your Token\u0026#39;\u0026#39;\u0026#39;/sendMessage\u0026#34; -d \u0026#34;chat_id=\u0026#34;Some Chat id\u0026#34;\u0026amp;text=hello\u0026#34;  curl -sX POST \u0026#34;https://api.telegram.org/botxxxxxxxxugt5A/sendMessage\u0026#34; -d \u0026#34;chat_id=48xxxxxx\u0026amp;text=hello\u0026#34; 如果返回成功，即表示成功\n2、进入容器\ndocker exec -it jd_scripts /bin/sh 执行步骤1命令，如若响应时间长或失败，则需要配置代理\n3、配置容器代理走宿主机\ndocker官方有教程\ndocker版本大于 17.07以上可用下面的方法\ncd mkdir .docker vim ~/.docker/config.json 填入下面json\n{  \u0026#34;proxies\u0026#34;:  {  \u0026#34;default\u0026#34;:  {  \u0026#34;httpProxy\u0026#34;: \u0026#34;http://172.17.0.1:7890\u0026#34;,  \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://172.17.0.1:7890\u0026#34;,  \u0026#34;noProxy\u0026#34;: \u0026#34;localhost,127.0.0.1\u0026#34; \u0026#34;  }  } } 保存文件创建或者启动新容器时才生效\n这里有个大坑，搞了一天，就是\n代理的ip一定要写对！\n代理的ip一定要写对！\n代理的ip一定要写对!\n 下午调试的时候https的写成了127的了，机器启动起来，pull代码的时候，直接找不到文件，当时还骂这破代理，没法，就把报错ip不走代理了，没想到下面不报错了，直接无限重启，搞得头都大了，还在想是不是内存爆了呢！晚上，打开配置文件，定睛一看，WC！\u0026ldquo;httpsProxy\u0026quot;端口写的127\u0026hellip;赶紧改了，重新跑遍，妥了，bot成功了！\n 4、删除容器，重新启用\n接下来在jd_scripts 目录内\ndocker-compose down docker-compose up -d 启动成功后，tgbot即可收到成功的消息，尽情享用吧！\nClash相关的管理命令 ## 启动Clash ## sudo systemctl start clash.service  ## 重启Clash ## sudo systemctl restart clash.service  ## 查看Clash运行状态 ## sudo systemctl status clash.service  ## 实时滚动状态 ## sudo journalctl -u clash.service -f docker相关命令 docker exec -it jd_scripts /bin/sh -c 'git -C /scripts pull \u0026amp;\u0026amp; node /scripts/jd_bean_change.js' 手动运行一脚本\ndocker exec -it jd_scripts /bin/sh -c 'env' 查看设置的环境变量\ndocker exec -it jd_scripts /bin/sh -c 'crontab -l' 查看已生效的crontab_list定时器任务\ndocker exec -it jd_scripts sh -c \u0026quot;docker_entrypoint.sh\u0026quot; 手动更新jd_scripts仓库最新脚本\ndocker exec -it jd_scripts /bin/sh 仅进入容器命令\nrm -rf logs/*.log 删除logs文件夹里面所有的日志文件\n [1] jd_docker [2] clash安装参考 [3] docker内代理参考 [4] clash自动更新订阅配置  ","permalink":"https://blog.zsan.ml/posts/docker-build-jdbot/","summary":"使用docker部署自动领金豆bot脚本 使用的版本： 服务器：centos 8 docke","title":"云服务器docker搭建自动领京豆bot互动指令"}]